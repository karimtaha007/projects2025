// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2024 19:46:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    orag_v2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module orag_v2_vlg_sample_tst(
	clk,
	R_DATA_IN,
	reset,
	sampler_tx
);
input  clk;
input [9:0] R_DATA_IN;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or R_DATA_IN or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module orag_v2_vlg_check_tst (
	A_OUT,
	Mem_out,
	opcode,
	tt,
	x1,
	x2,
	x3,
	x4,
	x5,
	x6,
	x7,
	x8,
	sampler_rx
);
input [9:0] A_OUT;
input [9:0] Mem_out;
input [1:0] opcode;
input [7:0] tt;
input  x1;
input  x2;
input  x3;
input  x4;
input  x5;
input  x6;
input  x7;
input  x8;
input sampler_rx;

reg [9:0] A_OUT_expected;
reg [9:0] Mem_out_expected;
reg [1:0] opcode_expected;
reg [7:0] tt_expected;
reg  x1_expected;
reg  x2_expected;
reg  x3_expected;
reg  x4_expected;
reg  x5_expected;
reg  x6_expected;
reg  x7_expected;
reg  x8_expected;

reg [9:0] A_OUT_prev;
reg [9:0] Mem_out_prev;
reg [1:0] opcode_prev;
reg [7:0] tt_prev;
reg  x1_prev;
reg  x2_prev;
reg  x3_prev;
reg  x4_prev;
reg  x5_prev;
reg  x6_prev;
reg  x7_prev;
reg  x8_prev;

reg [9:0] A_OUT_expected_prev;
reg [9:0] Mem_out_expected_prev;
reg [1:0] opcode_expected_prev;
reg [7:0] tt_expected_prev;
reg  x1_expected_prev;
reg  x2_expected_prev;
reg  x3_expected_prev;
reg  x4_expected_prev;
reg  x5_expected_prev;
reg  x6_expected_prev;
reg  x7_expected_prev;
reg  x8_expected_prev;

reg [9:0] last_A_OUT_exp;
reg [9:0] last_Mem_out_exp;
reg [1:0] last_opcode_exp;
reg [7:0] last_tt_exp;
reg  last_x1_exp;
reg  last_x2_exp;
reg  last_x3_exp;
reg  last_x4_exp;
reg  last_x5_exp;
reg  last_x6_exp;
reg  last_x7_exp;
reg  last_x8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_OUT_prev = A_OUT;
	Mem_out_prev = Mem_out;
	opcode_prev = opcode;
	tt_prev = tt;
	x1_prev = x1;
	x2_prev = x2;
	x3_prev = x3;
	x4_prev = x4;
	x5_prev = x5;
	x6_prev = x6;
	x7_prev = x7;
	x8_prev = x8;
end

// update expected /o prevs

always @(trigger)
begin
	A_OUT_expected_prev = A_OUT_expected;
	Mem_out_expected_prev = Mem_out_expected;
	opcode_expected_prev = opcode_expected;
	tt_expected_prev = tt_expected;
	x1_expected_prev = x1_expected;
	x2_expected_prev = x2_expected;
	x3_expected_prev = x3_expected;
	x4_expected_prev = x4_expected;
	x5_expected_prev = x5_expected;
	x6_expected_prev = x6_expected;
	x7_expected_prev = x7_expected;
	x8_expected_prev = x8_expected;
end


// expected A_OUT[ 9 ]
initial
begin
	A_OUT_expected[9] = 1'bX;
end 
// expected A_OUT[ 8 ]
initial
begin
	A_OUT_expected[8] = 1'bX;
end 
// expected A_OUT[ 7 ]
initial
begin
	A_OUT_expected[7] = 1'bX;
end 
// expected A_OUT[ 6 ]
initial
begin
	A_OUT_expected[6] = 1'bX;
end 
// expected A_OUT[ 5 ]
initial
begin
	A_OUT_expected[5] = 1'bX;
end 
// expected A_OUT[ 4 ]
initial
begin
	A_OUT_expected[4] = 1'bX;
end 
// expected A_OUT[ 3 ]
initial
begin
	A_OUT_expected[3] = 1'bX;
end 
// expected A_OUT[ 2 ]
initial
begin
	A_OUT_expected[2] = 1'bX;
end 
// expected A_OUT[ 1 ]
initial
begin
	A_OUT_expected[1] = 1'bX;
end 
// expected A_OUT[ 0 ]
initial
begin
	A_OUT_expected[0] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	repeat(2)
	begin
		opcode_expected[1] = 1'b0;
		opcode_expected[1] = #200000 1'b1;
		# 200000;
	end
	opcode_expected[1] = 1'b0;
end 
// expected opcode[ 0 ]
always
begin
	opcode_expected[0] = 1'b0;
	opcode_expected[0] = #100000 1'b1;
	#100000;
end 
// expected Mem_out[ 9 ]
initial
begin
	Mem_out_expected[9] = 1'bX;
end 
// expected Mem_out[ 8 ]
initial
begin
	Mem_out_expected[8] = 1'bX;
end 
// expected Mem_out[ 7 ]
initial
begin
	Mem_out_expected[7] = 1'bX;
end 
// expected Mem_out[ 6 ]
initial
begin
	Mem_out_expected[6] = 1'bX;
end 
// expected Mem_out[ 5 ]
initial
begin
	Mem_out_expected[5] = 1'bX;
end 
// expected Mem_out[ 4 ]
initial
begin
	Mem_out_expected[4] = 1'bX;
end 
// expected Mem_out[ 3 ]
initial
begin
	Mem_out_expected[3] = 1'bX;
end 
// expected Mem_out[ 2 ]
initial
begin
	Mem_out_expected[2] = 1'bX;
end 
// expected Mem_out[ 1 ]
initial
begin
	Mem_out_expected[1] = 1'bX;
end 
// expected Mem_out[ 0 ]
initial
begin
	Mem_out_expected[0] = 1'bX;
end 
// expected tt[ 7 ]
initial
begin
	tt_expected[7] = 1'bX;
end 
// expected tt[ 6 ]
initial
begin
	tt_expected[6] = 1'bX;
end 
// expected tt[ 5 ]
initial
begin
	tt_expected[5] = 1'bX;
end 
// expected tt[ 4 ]
initial
begin
	tt_expected[4] = 1'bX;
end 
// expected tt[ 3 ]
initial
begin
	tt_expected[3] = 1'bX;
end 
// expected tt[ 2 ]
initial
begin
	tt_expected[2] = 1'bX;
end 
// expected tt[ 1 ]
initial
begin
	tt_expected[1] = 1'bX;
end 
// expected tt[ 0 ]
initial
begin
	tt_expected[0] = 1'bX;
end 

// expected x1
initial
begin
	x1_expected = 1'bX;
end 

// expected x2
initial
begin
	x2_expected = 1'bX;
end 

// expected x3
initial
begin
	x3_expected = 1'bX;
end 

// expected x4
initial
begin
	x4_expected = 1'bX;
end 

// expected x5
initial
begin
	x5_expected = 1'bX;
end 

// expected x6
initial
begin
	x6_expected = 1'bX;
end 

// expected x7
initial
begin
	x7_expected = 1'bX;
end 

// expected x8
initial
begin
	x8_expected = 1'bX;
end 
// generate trigger
always @(A_OUT_expected or A_OUT or Mem_out_expected or Mem_out or opcode_expected or opcode or tt_expected or tt or x1_expected or x1 or x2_expected or x2 or x3_expected or x3 or x4_expected or x4 or x5_expected or x5 or x6_expected or x6 or x7_expected or x7 or x8_expected or x8)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_OUT = %b | expected Mem_out = %b | expected opcode = %b | expected tt = %b | expected x1 = %b | expected x2 = %b | expected x3 = %b | expected x4 = %b | expected x5 = %b | expected x6 = %b | expected x7 = %b | expected x8 = %b | ",A_OUT_expected_prev,Mem_out_expected_prev,opcode_expected_prev,tt_expected_prev,x1_expected_prev,x2_expected_prev,x3_expected_prev,x4_expected_prev,x5_expected_prev,x6_expected_prev,x7_expected_prev,x8_expected_prev);
	$display("| real A_OUT = %b | real Mem_out = %b | real opcode = %b | real tt = %b | real x1 = %b | real x2 = %b | real x3 = %b | real x4 = %b | real x5 = %b | real x6 = %b | real x7 = %b | real x8 = %b | ",A_OUT_prev,Mem_out_prev,opcode_prev,tt_prev,x1_prev,x2_prev,x3_prev,x4_prev,x5_prev,x6_prev,x7_prev,x8_prev);
`endif
	if (
		( A_OUT_expected_prev[0] !== 1'bx ) && ( A_OUT_prev[0] !== A_OUT_expected_prev[0] )
		&& ((A_OUT_expected_prev[0] !== last_A_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[0] = A_OUT_expected_prev[0];
	end
	if (
		( A_OUT_expected_prev[1] !== 1'bx ) && ( A_OUT_prev[1] !== A_OUT_expected_prev[1] )
		&& ((A_OUT_expected_prev[1] !== last_A_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[1] = A_OUT_expected_prev[1];
	end
	if (
		( A_OUT_expected_prev[2] !== 1'bx ) && ( A_OUT_prev[2] !== A_OUT_expected_prev[2] )
		&& ((A_OUT_expected_prev[2] !== last_A_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[2] = A_OUT_expected_prev[2];
	end
	if (
		( A_OUT_expected_prev[3] !== 1'bx ) && ( A_OUT_prev[3] !== A_OUT_expected_prev[3] )
		&& ((A_OUT_expected_prev[3] !== last_A_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[3] = A_OUT_expected_prev[3];
	end
	if (
		( A_OUT_expected_prev[4] !== 1'bx ) && ( A_OUT_prev[4] !== A_OUT_expected_prev[4] )
		&& ((A_OUT_expected_prev[4] !== last_A_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[4] = A_OUT_expected_prev[4];
	end
	if (
		( A_OUT_expected_prev[5] !== 1'bx ) && ( A_OUT_prev[5] !== A_OUT_expected_prev[5] )
		&& ((A_OUT_expected_prev[5] !== last_A_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[5] = A_OUT_expected_prev[5];
	end
	if (
		( A_OUT_expected_prev[6] !== 1'bx ) && ( A_OUT_prev[6] !== A_OUT_expected_prev[6] )
		&& ((A_OUT_expected_prev[6] !== last_A_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[6] = A_OUT_expected_prev[6];
	end
	if (
		( A_OUT_expected_prev[7] !== 1'bx ) && ( A_OUT_prev[7] !== A_OUT_expected_prev[7] )
		&& ((A_OUT_expected_prev[7] !== last_A_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[7] = A_OUT_expected_prev[7];
	end
	if (
		( A_OUT_expected_prev[8] !== 1'bx ) && ( A_OUT_prev[8] !== A_OUT_expected_prev[8] )
		&& ((A_OUT_expected_prev[8] !== last_A_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[8] = A_OUT_expected_prev[8];
	end
	if (
		( A_OUT_expected_prev[9] !== 1'bx ) && ( A_OUT_prev[9] !== A_OUT_expected_prev[9] )
		&& ((A_OUT_expected_prev[9] !== last_A_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[9] = A_OUT_expected_prev[9];
	end
	if (
		( Mem_out_expected_prev[0] !== 1'bx ) && ( Mem_out_prev[0] !== Mem_out_expected_prev[0] )
		&& ((Mem_out_expected_prev[0] !== last_Mem_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[0] = Mem_out_expected_prev[0];
	end
	if (
		( Mem_out_expected_prev[1] !== 1'bx ) && ( Mem_out_prev[1] !== Mem_out_expected_prev[1] )
		&& ((Mem_out_expected_prev[1] !== last_Mem_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[1] = Mem_out_expected_prev[1];
	end
	if (
		( Mem_out_expected_prev[2] !== 1'bx ) && ( Mem_out_prev[2] !== Mem_out_expected_prev[2] )
		&& ((Mem_out_expected_prev[2] !== last_Mem_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[2] = Mem_out_expected_prev[2];
	end
	if (
		( Mem_out_expected_prev[3] !== 1'bx ) && ( Mem_out_prev[3] !== Mem_out_expected_prev[3] )
		&& ((Mem_out_expected_prev[3] !== last_Mem_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[3] = Mem_out_expected_prev[3];
	end
	if (
		( Mem_out_expected_prev[4] !== 1'bx ) && ( Mem_out_prev[4] !== Mem_out_expected_prev[4] )
		&& ((Mem_out_expected_prev[4] !== last_Mem_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[4] = Mem_out_expected_prev[4];
	end
	if (
		( Mem_out_expected_prev[5] !== 1'bx ) && ( Mem_out_prev[5] !== Mem_out_expected_prev[5] )
		&& ((Mem_out_expected_prev[5] !== last_Mem_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[5] = Mem_out_expected_prev[5];
	end
	if (
		( Mem_out_expected_prev[6] !== 1'bx ) && ( Mem_out_prev[6] !== Mem_out_expected_prev[6] )
		&& ((Mem_out_expected_prev[6] !== last_Mem_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[6] = Mem_out_expected_prev[6];
	end
	if (
		( Mem_out_expected_prev[7] !== 1'bx ) && ( Mem_out_prev[7] !== Mem_out_expected_prev[7] )
		&& ((Mem_out_expected_prev[7] !== last_Mem_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[7] = Mem_out_expected_prev[7];
	end
	if (
		( Mem_out_expected_prev[8] !== 1'bx ) && ( Mem_out_prev[8] !== Mem_out_expected_prev[8] )
		&& ((Mem_out_expected_prev[8] !== last_Mem_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[8] = Mem_out_expected_prev[8];
	end
	if (
		( Mem_out_expected_prev[9] !== 1'bx ) && ( Mem_out_prev[9] !== Mem_out_expected_prev[9] )
		&& ((Mem_out_expected_prev[9] !== last_Mem_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mem_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mem_out_expected_prev);
		$display ("     Real value = %b", Mem_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Mem_out_exp[9] = Mem_out_expected_prev[9];
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( tt_expected_prev[0] !== 1'bx ) && ( tt_prev[0] !== tt_expected_prev[0] )
		&& ((tt_expected_prev[0] !== last_tt_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[0] = tt_expected_prev[0];
	end
	if (
		( tt_expected_prev[1] !== 1'bx ) && ( tt_prev[1] !== tt_expected_prev[1] )
		&& ((tt_expected_prev[1] !== last_tt_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[1] = tt_expected_prev[1];
	end
	if (
		( tt_expected_prev[2] !== 1'bx ) && ( tt_prev[2] !== tt_expected_prev[2] )
		&& ((tt_expected_prev[2] !== last_tt_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[2] = tt_expected_prev[2];
	end
	if (
		( tt_expected_prev[3] !== 1'bx ) && ( tt_prev[3] !== tt_expected_prev[3] )
		&& ((tt_expected_prev[3] !== last_tt_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[3] = tt_expected_prev[3];
	end
	if (
		( tt_expected_prev[4] !== 1'bx ) && ( tt_prev[4] !== tt_expected_prev[4] )
		&& ((tt_expected_prev[4] !== last_tt_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[4] = tt_expected_prev[4];
	end
	if (
		( tt_expected_prev[5] !== 1'bx ) && ( tt_prev[5] !== tt_expected_prev[5] )
		&& ((tt_expected_prev[5] !== last_tt_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[5] = tt_expected_prev[5];
	end
	if (
		( tt_expected_prev[6] !== 1'bx ) && ( tt_prev[6] !== tt_expected_prev[6] )
		&& ((tt_expected_prev[6] !== last_tt_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[6] = tt_expected_prev[6];
	end
	if (
		( tt_expected_prev[7] !== 1'bx ) && ( tt_prev[7] !== tt_expected_prev[7] )
		&& ((tt_expected_prev[7] !== last_tt_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tt_expected_prev);
		$display ("     Real value = %b", tt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tt_exp[7] = tt_expected_prev[7];
	end
	if (
		( x1_expected_prev !== 1'bx ) && ( x1_prev !== x1_expected_prev )
		&& ((x1_expected_prev !== last_x1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x1_expected_prev);
		$display ("     Real value = %b", x1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_x1_exp = x1_expected_prev;
	end
	if (
		( x2_expected_prev !== 1'bx ) && ( x2_prev !== x2_expected_prev )
		&& ((x2_expected_prev !== last_x2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x2_expected_prev);
		$display ("     Real value = %b", x2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_x2_exp = x2_expected_prev;
	end
	if (
		( x3_expected_prev !== 1'bx ) && ( x3_prev !== x3_expected_prev )
		&& ((x3_expected_prev !== last_x3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x3_expected_prev);
		$display ("     Real value = %b", x3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_x3_exp = x3_expected_prev;
	end
	if (
		( x4_expected_prev !== 1'bx ) && ( x4_prev !== x4_expected_prev )
		&& ((x4_expected_prev !== last_x4_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x4_expected_prev);
		$display ("     Real value = %b", x4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_x4_exp = x4_expected_prev;
	end
	if (
		( x5_expected_prev !== 1'bx ) && ( x5_prev !== x5_expected_prev )
		&& ((x5_expected_prev !== last_x5_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x5_expected_prev);
		$display ("     Real value = %b", x5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_x5_exp = x5_expected_prev;
	end
	if (
		( x6_expected_prev !== 1'bx ) && ( x6_prev !== x6_expected_prev )
		&& ((x6_expected_prev !== last_x6_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x6_expected_prev);
		$display ("     Real value = %b", x6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_x6_exp = x6_expected_prev;
	end
	if (
		( x7_expected_prev !== 1'bx ) && ( x7_prev !== x7_expected_prev )
		&& ((x7_expected_prev !== last_x7_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x7_expected_prev);
		$display ("     Real value = %b", x7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_x7_exp = x7_expected_prev;
	end
	if (
		( x8_expected_prev !== 1'bx ) && ( x8_prev !== x8_expected_prev )
		&& ((x8_expected_prev !== last_x8_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x8_expected_prev);
		$display ("     Real value = %b", x8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_x8_exp = x8_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module orag_v2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] R_DATA_IN;
reg reset;
// wires                                               
wire [9:0] A_OUT;
wire [9:0] Mem_out;
wire [1:0] opcode;
wire [7:0] tt;
wire x1;
wire x2;
wire x3;
wire x4;
wire x5;
wire x6;
wire x7;
wire x8;

wire sampler;                             

// assign statements (if any)                          
orag_v2 i1 (
// port map - connection between master ports and signals/registers   
	.A_OUT(A_OUT),
	.clk(clk),
	.Mem_out(Mem_out),
	.opcode(opcode),
	.R_DATA_IN(R_DATA_IN),
	.reset(reset),
	.tt(tt),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.x5(x5),
	.x6(x6),
	.x7(x7),
	.x8(x8)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 
// R_DATA_IN[ 9 ]
initial
begin
	R_DATA_IN[9] = 1'b0;
	R_DATA_IN[9] = #500000 1'b1;
end 
// R_DATA_IN[ 8 ]
initial
begin
	R_DATA_IN[8] = 1'b1;
	R_DATA_IN[8] = #500000 1'b0;
end 
// R_DATA_IN[ 7 ]
initial
begin
	R_DATA_IN[7] = 1'b0;
end 
// R_DATA_IN[ 6 ]
initial
begin
	R_DATA_IN[6] = 1'b0;
	R_DATA_IN[6] = #500000 1'b1;
end 
// R_DATA_IN[ 5 ]
initial
begin
	R_DATA_IN[5] = 1'b1;
end 
// R_DATA_IN[ 4 ]
initial
begin
	R_DATA_IN[4] = 1'b0;
end 
// R_DATA_IN[ 3 ]
initial
begin
	R_DATA_IN[3] = 1'b1;
	R_DATA_IN[3] = #500000 1'b0;
end 
// R_DATA_IN[ 2 ]
initial
begin
	R_DATA_IN[2] = 1'b1;
end 
// R_DATA_IN[ 1 ]
initial
begin
	R_DATA_IN[1] = 1'b0;
end 
// R_DATA_IN[ 0 ]
initial
begin
	R_DATA_IN[0] = 1'b0;
	R_DATA_IN[0] = #500000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

orag_v2_vlg_sample_tst tb_sample (
	.clk(clk),
	.R_DATA_IN(R_DATA_IN),
	.reset(reset),
	.sampler_tx(sampler)
);

orag_v2_vlg_check_tst tb_out(
	.A_OUT(A_OUT),
	.Mem_out(Mem_out),
	.opcode(opcode),
	.tt(tt),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.x5(x5),
	.x6(x6),
	.x7(x7),
	.x8(x8),
	.sampler_rx(sampler)
);
endmodule

