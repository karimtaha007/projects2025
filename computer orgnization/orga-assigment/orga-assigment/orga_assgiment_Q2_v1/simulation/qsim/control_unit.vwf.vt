// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/16/2024 20:46:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    control_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_unit_vlg_sample_tst(
	E,
	S,
	clk,
	qa,
	qs,
	reset,
	sampler_tx
);
input  E;
input  S;
input  clk;
input  qa;
input  qs;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(E or S or clk or qa or qs or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module control_unit_vlg_check_tst (
	T0,
	T1,
	T2,
	T3,
	T4,
	T5,
	T6,
	T7,
	sampler_rx
);
input  T0;
input  T1;
input  T2;
input  T3;
input  T4;
input  T5;
input  T6;
input  T7;
input sampler_rx;

reg  T0_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;
reg  T5_expected;
reg  T6_expected;
reg  T7_expected;

reg  T0_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;
reg  T5_prev;
reg  T6_prev;
reg  T7_prev;

reg  T0_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;
reg  T5_expected_prev;
reg  T6_expected_prev;
reg  T7_expected_prev;

reg  last_T0_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;
reg  last_T5_exp;
reg  last_T6_exp;
reg  last_T7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	T0_prev = T0;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
	T5_prev = T5;
	T6_prev = T6;
	T7_prev = T7;
end

// update expected /o prevs

always @(trigger)
begin
	T0_expected_prev = T0_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
	T5_expected_prev = T5_expected;
	T6_expected_prev = T6_expected;
	T7_expected_prev = T7_expected;
end



// expected T0
initial
begin
	T0_expected = 1'bX;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 

// expected T5
initial
begin
	T5_expected = 1'bX;
end 

// expected T6
initial
begin
	T6_expected = 1'bX;
end 

// expected T7
initial
begin
	T7_expected = 1'bX;
end 
// generate trigger
always @(T0_expected or T0 or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4 or T5_expected or T5 or T6_expected or T6 or T7_expected or T7)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected T0 = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | expected T5 = %b | expected T6 = %b | expected T7 = %b | ",T0_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev,T5_expected_prev,T6_expected_prev,T7_expected_prev);
	$display("| real T0 = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | real T5 = %b | real T6 = %b | real T7 = %b | ",T0_prev,T1_prev,T2_prev,T3_prev,T4_prev,T5_prev,T6_prev,T7_prev);
`endif
	if (
		( T0_expected_prev !== 1'bx ) && ( T0_prev !== T0_expected_prev )
		&& ((T0_expected_prev !== last_T0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T0_expected_prev);
		$display ("     Real value = %b", T0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_T0_exp = T0_expected_prev;
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end
	if (
		( T5_expected_prev !== 1'bx ) && ( T5_prev !== T5_expected_prev )
		&& ((T5_expected_prev !== last_T5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T5_expected_prev);
		$display ("     Real value = %b", T5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T5_exp = T5_expected_prev;
	end
	if (
		( T6_expected_prev !== 1'bx ) && ( T6_prev !== T6_expected_prev )
		&& ((T6_expected_prev !== last_T6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T6_expected_prev);
		$display ("     Real value = %b", T6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T6_exp = T6_expected_prev;
	end
	if (
		( T7_expected_prev !== 1'bx ) && ( T7_prev !== T7_expected_prev )
		&& ((T7_expected_prev !== last_T7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T7_expected_prev);
		$display ("     Real value = %b", T7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_T7_exp = T7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module control_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E;
reg S;
reg clk;
reg qa;
reg qs;
reg reset;
// wires                                               
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;
wire T5;
wire T6;
wire T7;

wire sampler;                             

// assign statements (if any)                          
control_unit i1 (
// port map - connection between master ports and signals/registers   
	.E(E),
	.S(S),
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.clk(clk),
	.qa(qa),
	.qs(qs),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// S
initial
begin
	S = 1'b0;
	S = #100000 1'b1;
	S = #40000 1'b0;
	S = #20000 1'b1;
	S = #80000 1'b0;
	S = #20000 1'b1;
	S = #20000 1'b0;
	S = #20000 1'b1;
	S = #120000 1'b0;
	S = #40000 1'b1;
	S = #20000 1'b0;
	S = #20000 1'b1;
	S = #20000 1'b0;
	S = #40000 1'b1;
	S = #40000 1'b0;
	S = #20000 1'b1;
	S = #20000 1'b0;
	S = #20000 1'b1;
	S = #20000 1'b0;
	S = #20000 1'b1;
	S = #20000 1'b0;
	S = #40000 1'b1;
	S = #40000 1'b0;
	S = #20000 1'b1;
	S = #40000 1'b0;
	S = #20000 1'b1;
	S = #20000 1'b0;
	S = #20000 1'b1;
	S = #60000 1'b0;
end 

// qa
initial
begin
	qa = 1'b0;
	qa = #120000 1'b1;
	qa = #40000 1'b0;
	qa = #40000 1'b1;
	qa = #40000 1'b0;
	qa = #40000 1'b1;
	qa = #40000 1'b0;
	qa = #40000 1'b1;
	qa = #80000 1'b0;
	qa = #80000 1'b1;
	qa = #40000 1'b0;
	qa = #80000 1'b1;
	qa = #40000 1'b0;
	qa = #40000 1'b1;
	qa = #80000 1'b0;
	qa = #80000 1'b1;
	qa = #80000 1'b0;
end 

// qs
initial
begin
	qs = 1'b1;
	qs = #40000 1'b0;
	qs = #80000 1'b1;
	qs = #200000 1'b0;
	qs = #40000 1'b1;
	qs = #80000 1'b0;
	qs = #40000 1'b1;
	qs = #40000 1'b0;
	qs = #40000 1'b1;
	qs = #40000 1'b0;
	qs = #40000 1'b1;
	qs = #120000 1'b0;
	qs = #40000 1'b1;
	qs = #40000 1'b0;
	qs = #40000 1'b1;
	qs = #80000 1'b0;
end 

// E
initial
begin
	E = 1'b1;
	E = #40000 1'b0;
	E = #60000 1'b1;
	E = #80000 1'b0;
	E = #80000 1'b1;
	E = #40000 1'b0;
	E = #20000 1'b1;
	E = #40000 1'b0;
	E = #20000 1'b1;
	E = #20000 1'b0;
	E = #60000 1'b1;
	E = #60000 1'b0;
	E = #20000 1'b1;
	E = #20000 1'b0;
	E = #60000 1'b1;
	E = #20000 1'b0;
	E = #20000 1'b1;
	E = #20000 1'b0;
	E = #20000 1'b1;
	E = #60000 1'b0;
	E = #40000 1'b1;
	E = #60000 1'b0;
	E = #20000 1'b1;
	E = #20000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

control_unit_vlg_sample_tst tb_sample (
	.E(E),
	.S(S),
	.clk(clk),
	.qa(qa),
	.qs(qs),
	.reset(reset),
	.sampler_tx(sampler)
);

control_unit_vlg_check_tst tb_out(
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.sampler_rx(sampler)
);
endmodule

